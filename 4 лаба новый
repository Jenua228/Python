from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, CallbackContext
import requests
import logging
from aiogram import *
from aiogram import Bot, types, Dispatcher, Router
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
import sys
import asyncio
from aiogram import F
from os import getenv
from aiogram.types import Message
from aiogram.utils.markdown import hbold

TOKEN = "6631264819:AAFpl9lbitMJxkRLw1-cGK46zHT4T9lC9rc"
bot = Bot(token=TOKEN)
dp = Dispatcher()
url = "https://api.spoonacular.com/recipes/findByIngredients?apiKey=a9d06e678b5a4d869b8d064b937b16d0"
flag = False

@dp.message(CommandStart())
async def start(msg: types.Message):
    await bot.send_message(msg.chat.id, "Привет!\nНапиши ингредиенты, из которых ты хочешь составить блюдо\nСоветую писать с маленькой буквы через запятую :)")

@dp.message(F.text)
async def message(msg: types.Message):
    global flag
    if msg.text !='/start' and flag == False:
        ingredients = {'ingredients': msg.text, 'number': 5, 'ranking': 2}
        response = requests.get(url, params=ingredients)
        data = response.json()[:5]
        flag = True

    #if flag == True:
    if msg.text.upper() not in [d["title"].upper() for d in data]:
        kb = [[types.KeyboardButton(text=d["title"]) for d in data]]
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True, one_time_keyboard=True
        )
        await bot.send_message(msg.chat.id, 'Можешь приготовить:\n%s' % [d["title"] for d in data])
            #flag = False
        #return
    elif flag == True:
        result = []

        for d in data:
            if msg.text.upper() == d["title"].upper():
                for t in d["missedIngredients"]:
                    result.append(
                        t["name"]
                    )
        await bot.send_message(msg.chat.id, "Состав блюда:\n%s" % ', '.join(result))
        flag = False
        #return

async def main() -> None:
    # Initialize Bot instance with a default parse mode which will be passed to all API calls
    bot = Bot(TOKEN, parse_mode=ParseMode.HTML)
    # And the run events dispatching
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())

